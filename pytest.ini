[pytest]
markers=
    # ------capaDatos-------

    # peticionMongo.py

    test_conseguirRespuestaDatos: este test comprueba que si la respuesta del servidor es correcta, devuelve la respuesta.
    test_conseguirRespuestaDatosKeyError: este test comprueba que en el caso de que mongodb envíe la respuesta correcta, no continua con el programa.
    test_conseguirRespuestaDatosConexionError: este test comprueba que en el caso de que mongodb no envíe la respuesta correcta, da error y no ejecuta el programa.
    test_respuestaMongo: test que comprueba que la funcion respuestaMongo devuelve la respuesta correcta.
    
    # listarDatosMongo.py

    test_listarBicisUno: este test comprueba que el modulo de listarDatos lista las bicis mediante la respuesta de mongodb.
    test_listarRentalsUno: este test comprueba que el modulo de listarDatos lista los rentals mediante la respuesta de mongodb.

    # ------capaPresentación-------

    # ---crearHtml---
    
    # funcionBaseHtml

    test_crearHtmlHead: este test comprueba que los parametros pasados en la funcion se introducen correctamente en le variable.
    test_crearHeader: este test comprueba que después de pasarle los parámetros, la función nos devuelve la variable header correctamente.

    # indexHtml

    test_crearBodyIndex: este test comprueba que el body creado es el que se solicita del archivo index.html.
    test_crearIndexHtml: este test comprueba que el archivo index.html existe y se ha creado correctamente.

    # marcasHtml

    test_crearBodyMarcas: este test comprueba que el body creado es el que se solicita del archivo marcas.html.
    test_crearMarcasHtml: este test comprueba que el archivo marcas.html existe y se ha creado correctamente.

    # rentalsHtml

    test_crearBodyRentals: este test comprueba que el body creado es el que se solicita del archivo rentals.html.
    test_crearRentalsHtml: este test comprueba que el archivo rentals.html existe y se ha creado correctamente.

    # bicisHtml

    test_crearBodyBicis: este test comprueba que el body creado es el que se solicita del archivo bicis.html.
    test_crearBicisHtml: este test comprueba que el archivo bicis.html existe y se ha creado correctamente.

    # biciSolitariaHtml

    test_biciSolitariaHtml: este test comprueba que la función crea correctamente el código html de una pagina biciSolitara.html

    # biciFiltro

    test_esFiltro: este test comprueba si la funcion que ejecuta un filtro, funciona correctamente.
    test_crearBodyBiciMarca: test que comprueba que la funcion crea correctamente el body de bicipormarca.html
    test_crearBodyBiciCateg: test que comprueba que la funcion crea correctamente el body de bicicaractistica.html
    test_crearBodyBiciCaract: test que comprueba que la funcion crea correctamente el body de bicicategoria.html

    # ---crearCss---

    # cssBase

    test_crearFooterCss: este test comprueba que la funcion que crea el codigo css de la parte footer, lo hace correctamente
    test_crearHeaderCss: este test comprueba que la funcion que crea el codigo css de la parte header, lo hace correctamente
    test_crearNavCss: este test comprueba que la funcion que crea el codigo css de la parte nav, lo hace correctamente
    test_crearBaseCss: este test comprueba que la funcion que crea el codigo css de la parte base, lo hace correctamente

    # cssPorPagina

    test_crearBicisCss: este test comprueba que se crea correctamente el codigo css de la pagina bicis.html
    test_crearBiciFiltroCss: este test comprueba que se crea correctamente el codigo css de la pagina por filtro css
    test_crearBiciSolitariaCss: este test comprueba que se crea correctamente el codigo css de la pagina bicisolitaria.html
    test_crearIndexCss: este test comprueba que se crea correctamente el codigo css de la pagina index.html
    test_crearMarcasCss: este test comprueba que se crea correctamente el codigo css de la pagina marcas.html
    test_crearRentalsCss: este test comprueba que se crea correctamente el codigo css de la pagina rentals.html

    # ------capaNegocio-------

    # crearDirectorios

    test_creacionDirectorios: este test comprueba que los directorios se crean correctamente en la ruta especificada y que si ya existe, no hay error
    test_errorCreacionDirectorios: este test comprueba que si en la ruta especificada existe un archivo y no se puede crear un directorio, hay error y lo captura.

        # crearArchivo

    test_crearArchivo: este test comprueba que la funcion crea un archivo en el lugar indica.
    test_noExisteDirectorio: este test comprueba que la funcion capta el error en el caso de que el directorio no exista.

    # ------CRUD-------

    # actions

    test_actionSintaxSearch: este test comprueba que la clave find se genera correctamente
    test_actionSintaxCreate: este test comprueba que la clave insert se genera correctamente
    test_actionSintaxUpdate: este test comprueba que la clave update se genera correctamente
    test_actionSintaxDelete: este test comprueba que la clave delete se genera correctamente

    # ------Check-------

    # checkDatos

    test_respuestaEsModelo: comprueba que si la respuesta transformada, no es el modelo necesario devuelve False.
    test_respuestaCorrecta: comprueba que si la respuesta no es correcta, devuelve False
    test_rentalModelo: comprueba que si la lista de rentals no es modelo el programa devuelve False
    test_biciModelo: comprueba que si la lista de bicis no es modelo el programa devuelve False

    # checkNegocio

    test_existenDirectorios: este test comprueba que los directorios necesarios existen, y en caso contrario, devuelve False
    test_existenArchivos: este test comprueba que todos los archivos html y css estan creados correctamente, sino, devuelve False